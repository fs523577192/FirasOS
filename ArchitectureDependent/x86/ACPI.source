<Head Language="Chinese">
高级配置和电源管理接口
作者：伍裕平
归属：操作系统内核
</Head>
<Head Language="English">
Advanced Configuration and Power Management Interface
Author: Firas
BelongsTo: OS Kernel
</Head>
<Comment Language="Chinese">
--	关于ACPI系统表，请见《ACPI规范5.0a》。ACPI规范可从ACPI官网
	（http://acpi.info）免费下载。
--	ACPI系统表的缩写的意义如下：
RSDP	-	根系统描述指针
RSDT	-	根系统描述表
XSDT	-	拓展（根）系统描述表
FADT	-	固定ACPI描述表
FACS	-	固件ACPI控制结构
DSDT	-	差异化系统描述表
SSDT	-	二级系统描述表
MADT	-	多APIC描述表

</Comment>
<Comment Language="English">
--	For details of ACPI system tables, please see ACPI Specification,
	Revision 5.0a. The ACPI specification can be downloaded for free
	from the official website of ACPI (http://acpi.info).
--	The meaning of the abbreviations of ACPI system tables are as follows:
RSDP	-	Root System Description Pointer
RSDT	-	Root System Description Table
XSDT	-	Extended System Description Table
FADT	-	Fixed ACPI Description Table
FACS	-	Firmware ACPI Control Structure
DSDT	-	Differentiated System Description Table
SSDT	-	Secondary System Description Table
MADT	-	Multiple APIC Description Table

</Comment>
<Cpp>
namespace ACPI{

class RSDP{
public:
	char	signature[8];
	BYTE	checksum;
	char	oemID[6];
	BYTE	revision;
	UINT32	addressRSDT;
	// extended
	UINT32	length;
	UINT64	addressXSDT;
	BYTE	extendedChecksum;
	BYTE	reserved[3];
	
	
}; // class RSDP

class Head{
public:
	char	signature[4];
	UINT32	length;
	BYTE	revision;
	BYTE	checksum;
	char	oemID[6];
	char	oemTableID[8];
	UINT32	oemRevision;
	UINT32	creatorID;
	UINT32	creatorRevision;
}; // Head

class RSDT{
public:
	Head	head;
	// 32-bit entries (pointers to other ACPI tables)
}; // class RSDT

class XSDT{
public:
	Head	head;
	// 64-bit entries (pointers to other ACPI tables)
}; // class XSDT

class FADT{
public:
	Head	head;
	
	UINT32	addressFACS;
	UINT32	addressDSDT;
	
	BYTE	INT_MODEL;
	BYTE	Prefered_PM_Profile;
	const static BYTE PM_UNSPECIFIED = 0, PM_DESKTOP = 1, PM_MOBILE = 2,
			PM_WORKSTATION = 3, PM_ENTERPRISE_SERVER = 4,
			PM_SOHO_SERVER = 5, PM_APPLIANCE_PC = 6,
			PM_PERFORMANCE_SERVER = 7, PM_TABLET = 8;
	UINT16	SCI_INT;
	UINT32	SMI_CMD;
	BYTE	ACPI_ENABLE;
	BYTE	ACPI_DISABLE;
	BYTE	S4BIOS_REQ;
	BYTE	PSTATE_CNT;
	UINT32	PM1a_EVT_BLK;
	UINT32	PM1b_EVT_BLK;
	UINT32	PM1a_CNT_BLK;
	UINT32	PM1b_CNT_BLK;
	UINT32	PM2_CNT_BLK;
	UINT32	PM_TMR_BLK;
	UINT32	GPE0_BLK;
	UINT32	GPE1_BLK;
	BYTE	PM1_EVT_LEN;
	BYTE	PM1_CNT_LEN;
	BYTE	PM2_CNT_LEN;
	BYTE	PM_TMR_LEN;
	BYTE	GPE0_BLK_LEN;
	BYTE	GPE1_BLK_LEN;
	BYTE	GPE1_BASE;
	BYTE	CST_CNT;
	UINT16	P_LVL2_LAT;
	UINT16	P_LVL3_LAT;
	UINT16	FLUSH_SIZE;
	UINT16	FLUSH_STRIDE;
	BYTE	DUTY_OFFSET;
	BYTE	DUTY_WIDTH;
	BYTE	DAY_ALARM;
	BYTE	MONTH_ALARM;
	BYTE	CENTURY;
	struct{
		UINT16	LEGACY_DEVICES	:1;
		UINT16	HAS_8042	:1;
		UINT16	NO_VGA		:1;
		UINT16	NO_MSI		:1;
		UINT16	ASPM_CONTROL	:1;
		UINT16	NO_RTC		:1;
	}IAPC_BOOT_ARCH;
	
	BYTE	reserved0;
	struct{
		UINT32	HAS_WBINVD	:1;
		UINT32	WBINVD_FLUSH	:1;
		UINT32	PROC_C1		:1;
		UINT32	P_LVL2_UP	:1;
		UINT32	PWR_BUTTON	:1;
		UINT32	SLP_BUTTON	:1;
		UINT32	FIX_RTC		:1;
		UINT32	RTC_S4		:1;
		UINT32	TMR_VAL_EXT	:1;
		UINT32	DCK_CAP		:1;
		UINT32	RESET_REG_SUP	:1;
		UINT32	SEALED_CASE	:1;
		UINT32	HEADLESS	:1;
		UINT32	CPU_SW_SLP	:1;
		UINT32	PCI_EXP_WAK	:1;
		UINT32	USE_PLATFORM_CLOCK	:1;
		UINT32	S4_RTC_STS_VALID	:1;
		UINT32	REMOTE_POWER_ON_CAPABLE	:1;
		UINT32	FORCE_APIC_CLUSTER_MODEL:1;
		UINT32	FORCE_APIC_PHYSICAL_DESTINATION_MODE:1;
		UINT32	HW_REDUCED_ACPI	:1;
		UINT32	LOW_POWER_S0_IDLE_CAPABLE:1;
	}flags;
	
	UINT32	RESET_REG0, RESET_REG1, RESET_REG2;
	BYTE	RESET_VALUE;
	BYTE	reserved1, reserved2, reserved3;
	UINT64	X_FIRMWARE_CTRL;
	UINT64	X_DSDT;
	UINT32	X_PM1a_EVT_BLK0, X_PM1a_EVT_BLK1, X_PM1a_EVT_BLK2;
	UINT32	X_PM1b_EVT_BLK0, X_PM1b_EVT_BLK1, X_PM1b_EVT_BLK2;
	UINT32	X_PM1a_CNT_BLK0, X_PM1a_CNT_BLK1, X_PM1a_CNT_BLK2;
	UINT32	X_PM1b_CNT_BLK0, X_PM1b_CNT_BLK1, X_PM1b_CNT_BLK2;
	UINT32	X_PM2_CNT_BLK0, X_PM2_CNT_BLK1, X_PM2_CNT_BLK2;
	UINT32	X_PM_TMR_BLK0, X_PM_TMR_BLK1, X_PM_TMR_BLK2;
	UINT32	X_GPE0_BLK0, X_GPE0_BLK1, X_GPE0_BLK2;
	UINT32	X_GPE1_BLK0, X_GPE1_BLK1, X_GPE1_BLK2;
	UINT32	SLEEP_CONTROL_REG0, SLEEP_CONTROL_REG1, SLEEP_CONTROL_REG2;
	UINT32	SLEEP_STATUS_REG0, SLEEP_STATUS_REG1, SLEEP_STATUS_REG2;
}; // class FADT

class FACS{
public:
	char	signature[4];
	UINT32	length;
	char	hardwareSignature[4];
	UINT32	firmwareWakingVector;
	struct{
		UINT32	pending	:1;
		UINT32	owned	:1;
	}globalLock;
	struct{
		UINT32	S4BIOS_F:1;
		UINT32	64BIT_WAKE_SUPPORTED_F:1;
	}flags;
	UINT64	XfirmwareWakingVector;
	BYTE	version;
	BYTE	reserved0[3];
	struct{
		UINT32	64BIT_WAKE_F:1;
	}OSPM_Flags;
	BYTE	reserved1[24];
	
}; // class FACS

class DSDT{
	Head	head;
	
}; // class DSDT

class SSDT{
	Head	head;
	
}; // class SSDT

class MADT{
	Head	head;
	UINT32	addressLIC;
	struct{
		UINT32 PCAT_COMPAT	:1;
	}flags;
	
	
}; // class MADT
class EntryLAPIC{
	BYTE	type;
	BYTE	length;
	BYTE	processorID;
	BYTE	id;
	struct{
		UINT32	enabled	:1;
	}flags;
}; // class EntryLAPIC
class EntryIOAPIC{
	BYTE	type;
	BYTE	length;
	BYTE	id;
	BYTE	reserved;
	UINT32	address;
	UINT32	interruptBase;
}; // class EntryIOAPIC
class InterruptSourceOverride{
	BYTE	type;
	BYTE	length;
	BYTE	bus;
	BYTE	source;
	UINT32	globalSystemInterrupt;
	struct{
		UINT16	polarity	:2;
		UINT16	triggerMode	:2;
	}flags;
	const static UINT16 conforming = 0,
		activeHigh = 1, activeLow = 3,
		edgeTriggered = 1, levelTriggered = 3;
}; // class InterruptSourceOverride
class NMI_Source{
	BYTE	type;
	BYTE	length;
	struct{
		UINT16	polarity	:2;
		UINT16	triggerMode	:2;
	}flags;
	const static UINT16 conforming = 0,
		activeHigh = 1, activeLow = 3,
		edgeTriggered = 1, levelTriggered = 3;
	UINT32	globalSystemInterrupt;
}; // class NMI_Source
class LAPIC_NMI{
	BYTE	type;
	BYTE	length;
	BYTE	processorID;
	struct{
		UINT16	polarity	:2;
		UINT16	triggerMode	:2;
	}flags;
	const static UINT16 conforming = 0,
		activeHigh = 1, activeLow = 3,
		edgeTriggered = 1, levelTriggered = 3;
	BYTE	LINT;
}; // class LAPIC_NMI
class LAPIC_AddressOverride
	BYTE	type;
	BYTE	length;
	BYTE	reserved[2];
	UINT64	address;
}; // class LAPIC_AddressOverride
class EntryIOSAPIC{
	BYTE	type;
	BYTE	length;
	BYTE	id;
	BYTE	reserved;
	UINT32	interruptBase;
	UINT64	address;
}; // class EntryIOSAPIC
class EntryLSAPIC{
	BYTE	type;
	BYTE	length;
	BYTE	processorID;
	BYTE	id;
	BYTE	eid;
	BYTE	reserved[3];
	struct{
		UINT32	enabled	:1;
	}flags;
	UINT32	uidValue;
	// uidString
}; // class EntryLSAPIC
class PlatformInterruptSource{
	BYTE	type;
	BYTE	length;
	struct{
		UINT16	polarity	:2;
		UINT16	triggerMode	:2;
	}flags;
	const static UINT16 conforming = 0,
		activeHigh = 1, activeLow = 3,
		edgeTriggered = 1, levelTriggered = 3;
	BYTE	interruptType;
	BYTE	processorID;
	BYTE	processorEID;
	BYTE	IOSAPIC_vector;
	UINT32	globalSystemInterrupt;
	struct{
		UINT32	processorOverride;
	}interruptSourceFlags;
}; // class PlatformInterruptSource
class EntryX2APIC{
	BYTE	type;
	BYTE	length;
	BYTE	reserved[2];
	UINT32	id;
	struct{
		UINT32	enabled	:1;
	}flags;
	UINT32	processorUID;
}; // class EntryX2APIC
class X2APIC_NMI{
	BYTE	type;
	BYTE	length;
	struct{
		UINT16	polarity	:2;
		UINT16	triggerMode	:2;
	}flags;
	const static UINT16 conforming = 0,
		activeHigh = 1, activeLow = 3,
		edgeTriggered = 1, levelTriggered = 3;
	UINT32	processorUID;
	BYTE	LINT;
	BYTE	reserved[3];
}; // class X2APIC_NMI
class EntryGIC{
	BYTE	type;
	BYTE	length;
	BYTE	reserved[2];
	UINT32	id;
	UINT32	processorUID;
	struct{
		UINT32	enabled		:1;
		UINT32	interruptMode	:1;
	}flags;
	UINT32	protocolVersion;
	UINT32	GSIV;
	UINT64	parkedAddress;
	UINT64	address;
}; // class EntryGIC
class GIC_Distributor{
	BYTE	type;
	BYTE	length;
	BYTE	reserved0[2];
	UINT32	id;
	UINT64	address;
	UINT32	vectorBase;
	BYTE	reserved1[4];
}; // class GIC_Distributor

} // namespace ACPI
</Cpp>
