<head language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<cpp>
#ifndef _LINKED_STACK_H_
#define _LINKED_STACK_H_
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED _LINKED_STACK_H_
_LINKED_STACK_H_	EQU	1
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED _LINKED_STACK_H_
_LINKED_STACK_H_	EQU	1
</assemblyX86>
<include>Stack</include>
<include>../LinkedListNode</include>

<cpp>
template <typename T> class LinkedStack : public Stack<T>{
private:
	LinkedListNode<T> *top;
public:
	
	LinkedStack(){
		top = (LinkedListNode<T>*)0;
	}
	
	LinkedStack(T e){
		top = new LinkedListNode<T>(e);
	}
	
	~LinkedStack(){
		removeAllElement();
	}
	
	inline bool isEmpty(){	// inherited from Collection
		if(this == (LinkedStack*)0)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return true;
		#endif
		return top == (LinkedListNode<T>*)0;
	}
	
	unsigned getSize(){	// inherited from Collection
		if(isEmpty()) return 0;
		register unsigned size = 1;
		register LinkedListNode<T> *temp = top;
		while(temp->next != (LinkedListNode<T>*)0){
			size++;
			temp = temp->next;
		}
		return size;
	}
	
	bool addElement(T e){	// inherited from Collection
		if(this == (LinkedStack*)0)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return false;
		#endif
		top = new LinkedListNode<T>(e, top);
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">
LinkedStack.addElement:
	
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedStack.addElement:
	
	retn	8
</assemblyX86>
<cpp>
	
	bool hasElement(T e){	// inherited from Collection
		if(this == (LinkedStack*)0)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return false;
		#endif
		for(register LinkedListNode<T> *temp = top; temp != (LinkedListNode<T>*)0;
			temp = temp->next) if(temp->getKey()==e) return true;
		return false;
	}
	
	bool removeElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		if(top->getKey()==e){
			popElement();
			return true;
		}
		LinkedListNode<T> *temp1 = top, *temp2 = top->next;
		while(temp2 != (LinkedListNode<T>*)0){
			if(temp2->getKey()==e){
				temp1->next = temp2->next;
				delete temp2;
				return true;
			}
			temp1 = temp2;
			temp2 = temp2->next;
		}
		return false;
	}
	
	bool removeAllElement(){	// inherited from Collection
		if(isEmpty()) return false;
		while(top != (LinkedListNode<T>*)0){
			LinkedListNode<T> *temp = top;
			top = top->next;
			delete temp;
		}
		return true;
	}
	
	inline bool pushElement(T e){	// inherited from Stack
		return addElement(e);
	}
	
	T popElement(){	// inherited from Stack
	#ifdef _EXCEPTION_H_
		if(this == (LinkedStack*)0 || top == (LinkedListNode<T>*)0)
			throw NullPointerException();
	#endif
		T k = top->getKey();
		LinkedListNode<T> *temp = top;
		top = top->next;
		delete temp;
		return k;
	}
}; // class LinkedStack<T>
#endif // _LINKED_STACK_H_
</cpp>
<assemblyX64 compiler="fasm">
LinkedStack.pushElement	EQU	LinkedStack.addElement

LinkedStack.popElement:
	
	ret

END IF ; _LINKED_STACK_H_
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedStack.pushElement	EQU	LinkedStack.addElement


LinkedStack.popElement:
	
	ret

END IF ; _LINKED_STACK_H_
</assemblyX86>
