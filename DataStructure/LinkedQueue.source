<head language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<cpp>
#ifndef _LINKED_QUEUE_H_
#define _LINKED_QUEUE_H_
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED _LINKED_QUEUE_H_
_LINKED_QUEUE_H_	EQU	1
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED _LINKED_QUEUE_H_
_LINKED_QUEUE_H_	EQU	1
</assemblyX86>
<include>LinkedList2Node</include>
<cpp>
template <typename T> class LinkedQueue : public Queue<T> {
private:
	LinkedList2Node<T> *head;

public:
	
	LinkedQueue(){
		head = (LinkedList2Node<T>*)0;
	}
	
	LinkedQueue(T k){
		head = new LinkedList2Node<T>(k);
	}
	
	~LinkedQueue(){
		removeAllElement();
	}
	
	inline bool isEmpty(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedQueue*)0) throw NullPointerException();
		#endif
		return head == (LinkedList2Node<T>*)0;
	}
	
	unsigned getSize(){	// inherited from Collection
		if(isEmpty()) return 0;
		register unsigned size = 1;
		register LinkedList2Node<T> *temp = head;
		while(temp->next != head){
			size++;
			temp = temp->next;
		}
		return size;
	}
</cpp>
<assemblyX64 compiler="fasm">

LinkedQueue.isEmpty:
	;test	rcx,	rcx
	; TODO: NullPointerException
	mov	rax,	[rcx]
	test	rax,	rax
	jz	@F
	mov	rax,	1
@@:	ret

LinkedQueue.getSize:
	;test	rcx,	rcx
	; TODO: NullPointerException
	xor	rax,	rax	; rax = 0
	mov	rcx,	[rcx]	; rcx = head
	test	rcx,	rcx
	jz	.return		; jump if head == null
	push	rbx		; ##
	mov	rbx,	rcx	; rbx = head
@@:	cmp	rbx,	[rcx]
	je	@F		; jump if rcx->next == head
	inc	rax
	mov	rcx,	[rcx]
	jmp	@B
@@:	pop	rbx		; ##
.return:
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">

LinkedQueue.isEmpty:
	mov	eax,	[esp+4]		; eax = this
	;test	eax,	eax
	; TODO: NullPointerException
	mov	eax,	[eax]		; eax = this->head
	test	eax,	eax
	jz	@F
	mov	eax,	1
@@:	retn	4

LinkedQueue.getSize:
	push	ebx		; ##
	push	ecx		; @@
; stack: |ecx |ebx |ret |this|
	mov	ecx,	[esp+12]	; ecx = this
	;test	ecx,	ecx
	; TODO: NullPointerException
	xor	eax,	eax	; eax = 0
	mov	ecx,	[ecx]	; ecx = this->head
	test	ecx,	ecx
	jz	.return		; jump if this == null
	mov	ebx,	ecx	; ebx = this->head
@@:	cmp	ebx,	[ecx]
	je	.return		; jump if ecx->next == head
	inc	eax
	mov	ecx,	[ecx]
	jmp	@B
.return:
	pop	ecx		; @@
	pop	ebx		; ##
	retn	4
</assemblyX86>
<cpp>
	
	bool addElement(T e){	// inherited from Collection
		if(isEmpty()){
			head = new LinkedList2Node<T>(e);
			head->prev = head->next = head;
		}else{
			head = new LinkedList2Node<T>(e, head, head->prev);
		}
		return true;
	}
	
	bool hasElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		if(head->getKey() == e) return true;
		for(register LinkedList2Node<T> *temp = head->next;
				temp != head; temp = temp->next){
			if(temp->getKey() == e) return true;
		}
		return false;
	}
	
	bool removeElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		if(head->key == e){
			if(head->next == head){
				delete head;
				head = (LinkedList2Node<T>*)0;
			}else{
				head = head->next;
				delete head->prev;
			}
			return true;
		}
		for(register LinkedList2Node<T> *temp = head->next;
				temp != head; temp = temp->next){
			if(temp->key == e){
				delete temp;
				return true;
			}
		}
	}
	
	bool removeAllElement(){	// inherited from Collection
		if(isEmpty()) return false;
		while(head->prev != head){
			delete head->prev;
		}
		delete head;
		head = (LinkedList2Node<T>*)0;
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">
LinkedQueue.removeAllElement:
	;test	rcx,	rcx
	; TODO: NullPointerException
	push	rbx		; ##
	mov	rax,	[rcx]
	test	rax,	rax
	jz	.false
	
	; TODO: delete
	xor	rax,	rax
	mov	[rcx],	rax	; head = 0
	or	al,	1	; rax = 1
	pop	rbx		; ##
	ret
.false:	xor	rax,	rax
	pop	rbx		; ##
	ret
</assemblyX64>
<assemblyX86>
LinkedQueue.removeAllElement:
	
	xor	eax,	eax
	retn	4
</assemblyX86 compiler="fasm">
<cpp>
	
	T getheadElement(){	// inherited from Queue
		#ifdef _EXCEPTION_H_
		if(this == (LinkedQueue*)0 || head == (LinkedList2Node<T>*)0)
			throw NullPointerException();
		#endif
		return head->key;
	}
	
	bool addElementTohead(T e){	// inherited from Queue
		return addElement(e);
	}
	
	bool removeheadElement(){	// inherited from Queue
		if(isEmpty()) return false;
		if(head == head->prev){
			delete head;
			head = (LinkedList2Node<T>*)0;
		}else{
			head = head->next;
			delete head->prev;
		}
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">
LinkedQueue.removeheadElement:

</assemblyX64>
<assemblyX86>
LinkedQueue.removeheadElement:

</assemblyX86 compiler="fasm">
<cpp>
	
	T getTailElement(){	// inherited from Queue
		#ifdef _EXCEPTION_H_
		if(this == (LinkedQueue*)0 || head == (LinkedList2Node<T>*)0)
			throw NullPointerException();
		#endif
		return head->prev->key;
	}
	
	bool addElementToTail(T e){
		#ifdef _EXCEPTION_H_
		if(this == (LinkedQueue*)0) throw NullPointerException();
		#endif
		if(head == (LinkedList2Node<T>*)0){
			head = new LinkedList2Node<T>(e);
			head->next = head->prev = head;
		}else{
			new LinkedList2Node<T>(e, head, head->prev);
		}
		return true;
	}
	
	bool removeTailElement(){	// inherited from Queue
		if(isEmpty()) return false;
		if(head == head->prev){
			delete head;
			head = (LinkedList2Node<T>*)0;
		}else{
			delete head->prev;
		}
		return true;
	}
	
}; // class LinkedQueue<T>
#endif // _LINKED_QUEUE_H_
</cpp>
<assemblyX64 compiler="fasm">
LinkedQueue.removeTailElement:

END IF ; _LINKED_QUEUE_H_
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedQueue.removeTailElement:

END IF ; _LINKED_QUEUE_H_
</assemblyX86>
