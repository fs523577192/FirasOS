<head language="Chinese">
将是否左/右子和红黑颜色的信息保存在指针的0位中的红黑树
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Red Black Tree in Which the bit 0 of the Pointers Contain Information about
Whether the Node Is a Left/Right Child and Whether the Node Is Red/Black

Author: Firas
BelongsTo: Data Structure in the OS
</head>
<comment language="Chinese">
将是否左/右子和红黑颜色的信息保存在指针的0位中，故强制红黑树节点2字节对齐。
左子指针保存是否左子，右子指针保存是否右子，父指针保存红色还是黑色。
</comment>
<comment language="English">
The information about whether the node is a left child or a right child,
and whether the node is red or black is stored in the bit 0 of the pointers,
so the node must be aligned to 2-byte boundaries.
The left child pointer stores whether the node is a left child;
the right child pointer stores whether the node is a right child;
the parent pointer stores whether the node is red or black.
</comment>
<cpp>
#ifndef _RED_BLACK_H_
#define _RED_BLACK_H_	1
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED _RED_BLACK_H_
_RED_BLACK_H_	EQU	1
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED _RED_BLACK_H_
_RED_BLACK_H_	EQU	1
</assemblyX86>
<include>SortedBinaryTree</include>
<include>RedBlackNode</include>
<assemblyX64 compiler="fasm">

</assemblyX64>
<assemblyX86 compiler="fasm">

</assemblyX86>
<cpp>
template <typename T> class RedBlack : public SortedBinaryTree<T>{
protected:
	
	RedBlackNode<T> *root;
	static int (*compareKey)(T *k1, T *k2);
	#define	RedBlackNull	((RedBlack*)0)
	
public:
	
	RedBlack(){
		root = RedBlackNullNode;
	}
	
	RedBlack(T firstElement){
		root = new RedBlackNode<T>(firstElement);
	}
	
	inline bool isEmpty(){	// inherited from Collection
		if(this == RedBlackNull)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return true;
		#endif
		return (root == RedBlackNullNode);
	}
	
	inline unsigned getSize(){	// inherited from Collection
		if(this == RedBlackNull)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return 0;
		#endif
		return root->getWeight();
	}
</cpp>
<assemblyX64 compiler="fasm">

RedBlack.isEmpty:
	test	rcx,	rcx
	jz	.empty
	; TODO: NullPointerException
	mov	rax,	[rcx]
	test	rax,	rax
	jz	.empty
	xor	rax,	rax
	ret
.empty:
	mov	rax,	1
	ret

RedBlack.getSize:
	test	rcx,	rcx
	jz	.null
	; TODO: NullPointerException
	mov	rcx,	[rcx]
	call	RedBlackNode.getWeight
	ret
.null:
	xor	rax,	rax
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
RedBlack.isEmpty:
	mov	eax,	[esp+4]	; eax = this
	test	eax,	eax
	jz	.empty
	; TODO: NullPointerException
	mov	eax,	[eax]
	test	eax,	eax
	jz	.empty
	xor	eax,	eax
	retn	4
.empty:
	mov	al,	1
	retn	4

RedBlack.getSize:
	mov	eax,	[esp+4]
	test	eax,	eax
	jz	.null
	push	DWORD [eax]
	call	RedBlackNode.getWeight
.null:	retn	4
</assemblyX86>
<cpp>
	
	bool addElement(T e){	// inherited from Collection
		if(this == RedBlackNull) return false;
		if(root == RedBlackNullNode){
			root = new RedBlackNode<T>(e);
			return true;
		}
		root = root->addElementUnsafe(e)->getRoot();
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">

RedBlack._addNode:
	
.return:

	ret
</assemblyX64>
<assemblyX86 compiler="fasm">

RedBlack._addNode:

.return:

	retn	12
</assemblyX86>
<cpp>
	
	bool hasElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		register RedBlackNode<T> *temp = root;
		while(temp != RedBlackNullNode){
			if(temp->key == e) return true;
			if(temp->key > e) temp = temp->getRightUnsafe();
			else temp = temp->getLeftUnsafe();
		}
		return false;
	}
</cpp>
<assemblyX64 compiler="fasm">

RedBlack.hasElement:

</assemblyX64>
<assemblyX86 compiler="fasm">

RedBlack.hasElement:

</assemblyX86>
<cpp>
	
	bool removeElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		
	}
</cpp>
<assemblyX64 compiler="fasm">

RedBlack._removeNode:
	
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">

RedBlack._removeNode:
	
	retn	4
</assemblyX86>
<cpp>
	
	bool removeAllElement(){	// inherited from Collection
		if(isEmpty()) return false;
		root->removeSubTree();
		root = RedBlackNullNode;
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">

RedBlack.removeAllElement:
	test	rcx,	rcx
	jz	.empty
	; TODO: NullPointerException
	mov	rax,	[rcx]		; rax = root
	test	rax,	rax
	jz	.empty

	push	rcx
	mov	rcx,	rax
	call	RedBlackNode.removeSubTree
	pop	rcx
	xor	rax,	rax
	mov	[rcx],	rax		; root = null
	mov	rax,	1
	ret
.empty:
	xor	rax,	rax
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">

RedBlack.removeAllElement:
	mov	eax,	[esp+4]		; eax = this
	test	eax,	eax
	jz	.empty
	; TODO: NullPointerException
	mov	eax,	[rax]		; eax = root
	test	eax,	eax
	jz	.empty

	push	eax
	call	RedBlackNode.removeSubTree
	mov	eax,	[esp+4]		; eax = this
	mov	DWORD [eax],	0	; root = null
	mov	eax,	1
	retn	4
.empty:
	xor	eax,	eax
	retn	4
</assemblyX86>
<cpp>
	
	T getFirstElement(){	// inherited from SortedCollection
		
	}
	
	bool removeFirstElement(){	// inherited from SortedCollection
		
	}
	
	T getLastElement(){		// inherited from SortedCollection
		
	}
	
	bool removeLastElement(){	// inherited from SortedCollection
		
	}
	
	T getFloorElement(T e, bool inclusive){
	// inherited from SortedCollection
		
	}
	
	T getCeilingElement(T e, bool inclusive){
	// inherited from SortedCollection
		
	}
	
	SortedCollection* headSet(T toElement, bool inclusive){
	// inherited from SortedCollection
			
	}
	
	SortedCollection* tailSet(T fromElement, bool inclusive){
	// inherited from SortedCollection
		
	}
	
	SortedCollection* middleSet(T fromElement, bool fromInclusive,
				T toElement, bool toInclusive){
	// inherited from SortedCollection
		
	}
	
}; // class RedBlack<T>
#endif // _RED_BLACK_H_
</cpp>
