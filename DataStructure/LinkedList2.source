<Head Language=Chinese>
作者：伍裕平
归属：操作系统数据结构
</Head>
<Head Language=English>
Author: Firas
BelongsTo: Data Structure in the OS
</Head>
<Comment Language=Chinese>
双向不循环链表
</Comment>
<Comment Language=English>
Bi-directional Not-circular LinkedList
</Comment>
<Include>LinkedList2Node</Include>
<Cpp>
#ifndef _LINKED_LIST_2_H_
#define _LINKED_LIST_2_H_
template <typename T> class LinkedList2 : public List<T>{
private:
	LinkedList2Node<T> *head;
	
public:
	
	LinkedList2(){
		head = (LinkedList2Node<T>*)0;
	}
	
	LinkedList2(T e){
		head = new LinkedList2Node<T>(e);
	}
	
	~LinkedList2(){
		removeAllElement();
	}
	
	inline bool isEmpty(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList2*)0) throw NullPointerException();
		#endif
		return head == (LinkedList2Node<T>*)0;
	}
	
	unsigned getSize(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList2*)0) throw NullPointerException();
		#endif
		register unsigned size = 0;
		for(register LinkedList2Node<T> *temp = head;
			temp != (LinkedList2Node<T>*)0;
			temp = temp->next) size++;
		return size;
	}
</Cpp>
<AssemblyX64 Compiler=fasm>
LinkedList2.isEmpty:
		
	mov	rax,	[rcx]	; rcx == this; rax = this->head
	test	rax,	rax
	jz	@F		; jump if head == LinkedListNullNode
	xor	rax,	rax
	ret
@@:	mov	rax,	1
	ret

LinkedList2.getSize:
	
	xor	rax,	rax
	mov	rcx,	[rcx]		; rcx = this->head
@@:	test	rcx,	rcx
	jz	@F			; jump if rcx == null
	inc	rax
	mov	rcx,	[rcx]		; rcx = rcx->next
	jmp	@B
@@:	ret
</AssemblyX64>
<AssemblyX86 Compiler=fasm>
LinkedList2.isEmpty:
	
	mov	eax,	[esp+4]	; eax = this
	mov	eax,	[eax]	; eax = this->head
	test	eax,	eax
	jz	@F		; jump if head == LinkedListNullNode
	xor	eax,	eax
	retn	4
@@:	mov	eax,	1
	retn	4

LinkedList2.getSize:
	push	ecx
; stack: |ecx |ret |this|
	mov	ecx,	[esp+8]		; ebx = this
	
	xor	eax,	eax
	mov	ecx,	[ecx]		; ecx = this->head
@@:	test	ecx,	ecx
	jz	@F			; jump if ecx == null
	inc	eax
	mov	ecx,	[ecx]		; ecx = ecx->next
	jmp	@B
@@:	pop	ecx
	retn	4
</AssemblyX86>
<Cpp>
	
	bool addElement(T e){	// inherited from Collection
		if(isEmpty()) head = new LinkedList2Node<T>(e);
		else head = new LinkedList2Node<T>(e, head, LinkedList2NullNode);
		return true;
	}
	
	bool hasElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		for(LinkedList2Node<T> *temp = head;
				temp != LinkedList2NullNode;
				temp = temp->next)
			if(temp->key == e) return true;
		return false;
	}
	
	bool removeElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		register LinkedList2Node<T> *temp = head;
		if(head->key == e){
			head = head->next;
			delete temp;
			return true;
		}
		temp = head->next;
		while(temp != LinkedList2NullNode){
			if(temp->key == e){
				delete temp;
				return true;
			}
			temp = temp->next;
		}
		return false;
	}
	
	bool removeAllElement(){	// inherited from Collection
		if(isEmpty()) return false;
		while(head != LinkedList2NullNode){
			LinkedList2Node<T> *temp = head;
			head = head->next;
			delete temp;
		}
		return true;
	}
	
	T getElementAtIndex(unsigned index){	// inherited from List
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList2*)0 || head == LinkedList2NullNode)
			throw NullPointerException();
		#endif
		register LinkedList2Node<T> *temp = head;
		while(index > 0 && temp != LinkedList2NullNode){
			temp = temp->next;
			index--;
		}
		if(temp != LinkedList2NullNode) return temp->key;
		#ifdef _EXCEPTION_H_
		throw IndexOutOfBoundsException();
		#endif
	}
	
	bool insertElementAtIndex(T e, unsigned index){	// inherited from List
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList2*)0) throw NullPointerException();
		#endif
		if(index == 0){
			head = new LinkedList2Node<T>(e, head,
				LinkedList2NullNode);
			return true;
		}
		register LinkedList2Node<T> *temp = head;
		while(index > 1 && temp != LinkedList2NullNode){
			temp = temp->next;
			index--;
		}
		if(temp == LinkedList2NullNode) return false;
		new LinkedList2Node<T>(e, temp->next, temp);
		return true;
	}
	
	bool removeElementAtIndex(unsigned index){	// inherited from List
		if(isEmpty()) return false;
		LinkedList2Node<T> *temp = head->next;
		if(index == 0){
			delete head;
			head = temp;
			return true;
		}
		while(index > 1 && temp != LinkedList2NullNode){
			temp = temp->next;
			index--;
		}
		if(temp == LinkedList2NullNode) return false;
		delete temp;
		return true;
	}
	
	List<T>* subList(unsigned fromIndex, unsigned toIndex){
	// inherited from List
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList2*)0) throw NullPointerException();
		register unsigned size = getSize();
		if(fromIndex >= size || toIndex > size)
			throw IndexOutOfBoundsException();
		#endif
		LinkedList2 *list = new LinkedList2();
		if(fromIndex >= toIndex) return list;
		LinkedList2Node<T> *temp1 = head;
		while(fromIndex > 0){
			temp1 = temp1->next;
			fromIndex--;
			toIndex--;
		}
		list->head = new LinkedList2Node<T>(temp1->key);
		LinkedList2Node<T> *temp2 = list->head;
		while(toIndex > 1){
			temp1 = temp1->next;
			new LinkedList2Node<T>(temp1->key, LinkedList2NullNode, temp2);
			temp2 = temp2->next;
			toIndex--;
		}
		return list;
	}
	
	bool isEqual(List<T> *l){	// inherited from List
		if(getSize() != l->getSize()) return false;
		LinkedList2Node<T> *temp = head;
		for(unsigned i = 0;
				temp != LinkedList2NullNode;
				i++, temp = temp->next)
			if(temp->key != l->getElementAtIndex(i)) return false;
		return true;
	}
	
}; // class LinkedList2<T>
#endif // _LINKED_LIST_2_H_
</Cpp>
