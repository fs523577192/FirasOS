<head language="Chinese">

</head>
<head language="English">

</head>
<cpp>
#ifndef _BIG_INTEGER_H_
#define _BIG_INTEGER_H_
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED _BIG_INTEGER_H_
_BIG_INTEGER_H_	EQU	1
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED _BIG_INTEGER_H_
_BIG_INTEGER_H_	EQU	1
</assemblyX86>
<include>../../Macro</include>
<cpp>
#define TO_SIGNED(x)	((signed)(x))

class BigInteger{
protected:
	
	unsigned *array;
	
	BigInteger(unsigned* theArray){
		array = theArray;
	}
public:
	
	BigInteger*const BigIntegerNull;
	unsigned*const NullArray;
	
	BigInteger(){
		array = new unsigned[2];
		array[0] = 1; array[1] = 0;
	}
	
	BigInteger(const int initial){
		if(initial == INT_MIN){
			array = new unsigned[3];
			array[0] = 2; array[1] = INT_MIN; array[2] = ~0;
		}else{
			array = new unsigned[2];
			array[0] = 1; array[1] = initial;
		}
	}
	
	BigInteger(const BigInteger& origin){
		#ifdef _EXCEPTION_H_
		if(origin.getArray() == NullArray)
			throw NullPointerException();
		#endif
		register unsigned size = origin.array[0]+1;
		array = new unsigned[size];
		do{
			--size;
			array[size] = origin.array[size];
		}while(size > 0);
	}
</cpp>
<assemblyX64 compiler="fasm">
BigInteger.fromInt:
	push	rcx
	cmp	rcx,	8000000000000000h
	je	@F
	;invoke	new,	2*8
	pop	QWORD [rax+8]
	mov	QWORD [rax],	1
	ret
@@:	;invode	new,	3*8
	mov	QWORD [rax+16],	-1
	pop	QWORD [rax+8]
	mov	QWORD [rax],	2
	ret

BigInteger.clone:
	
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
BigInteger.fromInt:
	push	ebx
; stack: |ebx |ret |int |
	cmp	DWORD [esp+8],	80000000h
	je	@F
	;invode	new,	2*4
	mov	ebx,	eax
	mov	eax,	[esp+8]
	mov	[ebx+4],	eax
	mov	DWORD [ebx],	1
	jmp	.return
@@:	;invoke	new,	3*4
	mov	ebx,	eax
	mov	eax,	[esp+8]
	mov	DWORD [ebx+8],	-1
	mov	[ebx+4],	eax
	mov	DWORD [ebx],	2
.return:
	mov	eax,	ebx
	pop	ebx
	retn	4
	
BigInteger.clone:
	
	retn	4
</assemblyX86>
<cpp>
	
	BigInteger(cosnt String& str, const unsigned radix){
		
	}
	
	~BigInteger(){
		if(array != NullArray) delete array;
	}
</cpp>
<comment language="Chinese">

</comment>
<comment language="English">

</comment>
<cpp>
protected:
	
	inline unsigned* getArray(){
		if(this == BigIntegerNull)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return NullArray;
		#endif
		return array;
	}
	
	BigInteger trim(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned size = array[0];
		while(size > 1 && array[size] == 0 && TO_SIGNED(
				array[size-1]) >= 0) size--;
		while(size > 1 && TO_SIGNED(array[size]) == -1 &&
				TO_SIGNED(array[size-1]) < 0 &&
				array[size-1] == INT_MIN) size--;
		array[0] = size;
		return *this;
	}
	
	BigInteger expand(unsigned newSize, bool extendSign){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		if(newSize <= array[0]) return *(new BigInteger(*this));
		BigInteger nbi(new unsigned[newSize+1]);
		register unsigned i;
		for(i = 0; i <= array[0]; i++) nbi.array[i] = array[i];
		if(extendSign && TO_SIGNED(array[array[0]]) < 0){
			for(; i <= newSize; i++) nbi.array[i] = -1;
		}else{
			for(; i <= newSize; i++) nbi.array[i] = 0;
		}
		return nbi;
	}
</cpp>
<assemblyX64 compiler="fasm">
BigInteger._trim:
	test	rcx,	rcx
	jnz	@F
	; TODO: NullPointerException
	xor	rax,	rax
	ret
@@:	
	ret

BigInteger._expand:
	
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
BigInteger._trim:
	
	retn	4

BigInteger._expand:
	
	retn	4
</assemblyX86>
<cpp>
public:
	
	BigInteger _negate(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned i = 1;
		while(i < array[0] && array[i] == 0) i++;
		array[i] = -array[i];
		i++;
		while(i <= array[0]){
			array[i] = ~array[i];
			i++;
		}
		return *this;
	}
	BigInteger negate(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register BigInteger *temp = new BigInteger(*this);
		return temp->_negate();
	}
	
	BigInteger _absolute(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		if(TO_SIGNED(array[array[0]]) >= 0) return *this;
		return this->_negate();
	}
	BigInteger absolute(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		if(TO_SIGNED(array[array[0]]) >= 0) return *this;
		return this->negate();
	}
</cpp>
<assemblyX64 compiler="fasm">
BigInteger._negate:
	
	ret

BigInteger.negate:
	
	ret

BigInteger._absolute:
	
	ret

BigInteger.absolute:
	
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
BigInteger._negate:
	
	retn	4

BigInteger.negate:
	
	retn	4

BigInteger._absolute:
	
	retn	4

BigInteger.absolute:
	
	retn	4
</assemblyX86>
<cpp>
	
	int getSign(){
		if(getArray() == NullArray) return 2;
		if(TO_SIGNED(array[array[0]]) < 0) return -1;
		for(register unsigned size = array[0]; size > 0; size--){
			if(array[size] > 0) return 1;
		}
		return 0;
	}
	
	int compareTo(BigInteger bi){
		if(getArray() == NullArray || bi.getArray() == NullArray)
			return 2;
		
	}
	
	BigInteger _bitwiseNot(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		for(register unsigned size = array[0]; size > 0; size--)
			array[size] = ~array[size];
		return *this;
	}
	
	BigInteger bitwiseNot(){
		if(getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register BigInteger* temp = new BigInteger(*this);
		return temp->_bitwiseNot();
	}
	
	BigInteger _bitwiseAnd(BigInteger bi, bool extendSign){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned i;
		if(array[0] <= bi.array[0]){
			for(i = array[0]; i > 0; i--) array[i] &= bi.array[i];
		}else{
			for(i = 1; i <= bi.array[0]; i++)
				array[i] &= bi.array[i];
			if(!extendSign || TO_SIGNED(bi.array[bi.array[0]]) >= 0)
				for(; i <= array[0]; i++)
					array[i] = 0;	// and 0
		}
		return *this;
	}
	BigInteger bitwiseAnd(BigInteger bi, bool extendSign){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		BigInteger nbi;
		register unsigned i;
		if(array[0] <= bi.array[0]){
			nbi = this->expand(bi.array[0], extendSign);
			for(i = array[0]; i > 0; i--)
				nbi.array[i] &= bi.array[i];
			if(!extendSign || TO_SIGNED(bi.array[bi.array[0]]) >= 0)
				for(; i <= bi.array[0]; i++)
					nbi.array[i] = 0;	// and 0
		}else{
			nbi = *(new BigInteger(*this));
			for(i = 1; i <= bi.array[0]; i++)
				nbi.array[i] &= bi.array[i];
			if(!extendSign || TO_SIGNED(bi.array[bi.array[0]]) >= 0)
				for(; i <= array[0]; i++)
					nbi.array[i] = 0;	// and 0
		}
		return nbi;
	}
	
	BigInteger _bitwiseOr(BigInteger bi, bool extendSign){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned i;
		if(array[0] <= bi.array[0]){
			for(i = array[0]; i > 0; i--) array[i] &= bi.array[i];
		}else{
			for(i = 1; i <= bi.array[0]; i++)
				array[i] |= bi.array[i];
			if(extendSign && TO_SIGNED(bi.array[bi.array[0]]) < 0)
				for(; i <= array[0]; i++)
					array[i] = -1;	// or -1
		}
		return *this;
	}
	BigInteger bitwiseOr(BigInteger bi, bool extendSign){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		BigInteger nbi;
		register unsigned i;
		if(array[0] <= bi.array[0]){
			nbi = this->expand(bi.array[0], extendSign);
			for(i = array[0]; i > 0; i--)
				nbi.array[i] |= bi.array[i];
			if(extendSign && TO_SIGNED(bi.array[bi.array[0]]) < 0)
				for(; i <= bi.array[0]; i++)
					nbi.array[i] = -1;	// or -1
		}else{
			nbi = *(new BigInteger(*this));
			for(i = 1; i <= bi.array[0]; i++)
				nbi.array[i] |= bi.array[i];
			if(extendSign && TO_SIGNED(bi.array[bi.array[0]]) < 0)
				for(; i <= array[0]; i++)
					nbi.array[i] = -1;	// or -1
		}
		return nbi;
	}
	
	BigInteger _bitwiseXor(BigInteger bi, bool extendSign){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned i;
		if(array[0] <= bi.array[0]){
			for(i = array[0]; i > 0; i--) array[i] &= bi.array[i];
		}else{
			for(i = 1; i <= bi.array[0]; i++)
				array[i] ^= bi.array[i];
			if(extendSign && TO_SIGNED(bi.array[bi.array[0]]) < 0)
				for(; i <= array[0]; i++)
					array[i] = -1;	// or -1
		}
		return *this;
	}
	BigInteger bitwiseXor(BigInteger bi, bool extendSign){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		BigInteger nbi;
		register unsigned i;
		if(array[0] <= bi.array[0]){
			nbi = this->expand(bi.array[0], extendSign);
			for(i = array[0]; i > 0; i--)
				nbi.array[i] ^= bi.array[i];
			if(extendSign && TO_SIGNED(bi.array[bi.array[0]]) < 0)
				for(; i <= bi.array[0]; i++)
					nbi.array[i] = ~bi.array[i];	// xor -1
			else
				for(; i <= bi.array[0]; i++)
					nbi.array[i] = bi.array[i];	// xor 0
		}else{
			nbi = *(new BigInteger(*this));
			for(i = 1; i <= bi.array[0]; i++)
				nbi.array[i] ^= bi.array[i];
			if(extendSign && TO_SIGNED(bi.array[bi.array[0]]) < 0)
				for(; i <= array[0]; i++)
					nbi.array[i] = ~array[i];	// xor -1
		}
		return nbi;
	}
	
	BigInteger _add(BigInteger bi){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned carry = 0, i;
		if(array[0] <= bi.array[0]){
			for(i = 1; i <= array[0]; i++){
				array[i] += bi.array[i] + carry;
				carry = (carry != 0 &&
					bi.array[i] == array[i] ||
					bi.array[i] > array[i]);
			}
		}else{
			for(i = 1; i <= bi.array[0]; i++){
				array[i] += bi.array[i] + carry;
				carry = (bi.array[i] + carry > array[i]);
				carry = (carry != 0 &&
					bi.array[i] == array[i] ||
					bi.array[i] > array[i]);
			}
			register unsigned sign =
				TO_SIGNED(bi.array[bi.array[0]]) < 0 ? -1 : 0;
			for(; i <= array[0]; i++){
				array[i] += carry + sign;
				carry = (array[i] < carry + sign);
			}
		}
		return *this;
	}
	BigInteger add(BigInteger bi){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		return this->expand(array[0] < bi.array[0] ? 1 + bi.array[0] :
			1 + array[0], true)._add(bi);
	}
	
	BigInteger _subtract(BigInteger bi){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		register unsigned borrow = 0, i;
		if(array[0] <= bi.array[0]){
			for(i = 1; i <= array[0]; i++){
				array[i] -= bi.array[i] + borrow;
				borrow = (borrow != 0 &&
					bi.array[i] == array[i] ||
					bi.array[i] > array[i]);
			}
		}else{
			for(i = 1; i <= bi.array[0]; i++){
				array[i] -= bi.array[i] + borrow;
				borrow = (bi.array[i] + borrow > array[i]);
				borrow = (borrow != 0 &&
					bi.array[i] == array[i] ||
					bi.array[i] > array[i]);
			}
			register unsigned sign =
				TO_SIGNED(bi.array[bi.array[0]]) < 0 ? -1 : 0;
			for(; i <= array[0]; i++){
				array[i] += borrow + sign;
				borrow = (array[i] < borrow + sign);
			}
		}
		return *this;
	}
	BigInteger subtract(BigInteger bi){
		if(getArray() == NullArray || bi.getArray() == NullArray){
			BigInteger n(NullArray);
			return n;
		}
		
	}
	
	BigInteger _shiftLeftLogical(const signed n){
		
		return this;
	}
	BigInteger shiftLeftLogical(const signed n){
		
	}
	BigInteger shiftLeftArithmetic(const signed n){
		
	}
	
	BigInteger _shiftRightLogical(const signed n){
		
		return this;
	}
	BigInteger shiftRightLogical(const signed n){
		
	}
	BigInteger _shiftRightArithmetic(const signed n){
		
		return this;
	}
	BigInteger shiftRightArithmetic(const signed n){
		
	}
protected:
	
	double* FFT(){
		
	}
	
	void IFFT(double* fft){
		
	}
	
	void round(unsigned *dest, double *src, unsigned num){
		
	}
public:
	
	BigInteger multiply(int num){
	
	}
	
	BigInteger multiplySimple(BigInteger bi){
	
	}
	
	BigInteger multiply(BigInteger bi){
	
	}
	
	BigInteger divideSimple(BigInteger bi){
	
	}
	
	BigInteger gcd(BigInteger bi){
	
	}
	
	
}; // class BigInteger
BigInteger*const BigInteger::BigIntegerNull = reinterpret_cast<BigInteger*>(0);
unsigned*const BigInteger::NullArray = reinterpret_cast<unsigned*>(0);
#endif // _BIG_INTEGER_H_
</cpp>
<assemblyX64 compiler="fasm">
END IF ; _BIG_INTEGER_H_
</assemblyX64>
<assemblyX86 compiler="fasm">
END IF ; _BIG_INTEGER_H_
</assemblyX86>
