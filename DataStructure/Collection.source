<head language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<include>../Macro</include>
<cpp>
template <typename T> class Collection{
public:
	
	virtual ~Collection(){};
	
</cpp>
<comment language="Chinese">
--	返回：true若集合为空（不含任何元素），或false若集合不为空
</comment>
<comment language="English">
--	Return: true if the collection is empty (has no element),
	or false if the collection is not empty.
</comment>
<cpp>
	virtual bool isEmpty() = 0;
</cpp>

<comment language="Chinese">
--	返回：集合所含元素的数目（>=0）
</comment>
<comment language="English">
--	Return: the number of elements the collection has (>=0).
</comment>
<cpp>
	virtual unsigned getSize() = 0;
</cpp>

<comment language="Chinese">
--	向集合中插入一个元素e
--	返回
</comment>
<comment language="English">
--	Adds an element e to the collection.
--	Return: true if it successes, or false if it fails.
</comment>
<cpp>
	virtual bool addElement(T e) = 0;
</cpp>

<comment language="Chinese">
--	返回：
</comment>
<comment language="English">
--	Return: true if the collection has the element e,
	or false if the collection has not.
</comment>
<cpp>
	virtual bool hasElement(T e) = 0;
</cpp>

<comment language="Chinese">
--	返回：
</comment>
<comment language="English">
--	Return: true if the collection has the element e
	and successfully removes e from it, or false if
	the collection has not e or fails to remove e.
</comment>
<cpp>
	virtual bool removeElement(T e) = 0;
</cpp>

<comment language="Chinese">
--	移除集合中的所有元素
--	返回：
</comment>
<comment language="English">
--	Removes all the elements in the collection
--	Return: true
</comment>
<cpp>
	virtual bool removeAllElement() = 0;
	
}; // class Collection<T>

template <typename T> class List : public Collection<T>{
public:
	
	virtual ~List(){};
	
</cpp>
<comment language="Chinese">

</comment>
<comment language="English">
--	The first element in the list has index 0.
--	Return: null if the index is equal or larger
	than the size of the list, or the element at
	the given index.
</comment>
<cpp>
	virtual T getElementAtIndex(unsigned index) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Sets the element in the list at the given index.
--	Return: false if the index is larger than the
	size of the list, or true if it successfully
	sets the element at the given index.
</comment>
<cpp>
	virtual bool setElementAtIndex(T e, unsigned index) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Inserts an element in the list at the given index.
--	The inserted element will be at the given index,
	that is getElementAtIndex(index) == e after the
	insertion.
--	Return: false if the index is larger than the
	size of the list, or true if it successfully
	inserts the element at the given index.
</comment>
<cpp>
	virtual bool insertElementAtIndex(T e, unsigned index) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: false if the index is equal or larger
	than the size of the list or it fails to remove
	the element at the given index, or true if it
	successfully removes the element at the given
	index.
</comment>
<cpp>
	virtual bool removeElementAtIndex(unsigned index) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: null if fromIndex>=toIndex, or a list
	containing all the elements of this list from
	getElementAtIndex(fromIndex) to
	getElementAtIndex(toIndex-1)
</comment>
<cpp>
	virtual List* subList(unsigned fromIndex, unsigned toIndex) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: true only if the two lists has the same elements
	at the same indexes (in the same order)
</comment>
<cpp>
	virtual bool isEqual(List *l) = 0;
	
}; // class IndexedCollection<T>

template <typename T> class Stack : public Collection<T>{
public:
	
	virtual ~Stack(){};
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Pushes an element to the stack (adds the element
	to the top of the stack.
	
</comment>
<cpp>
	virtual bool pushElement(T e) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Pops an element from the stack (take the element
	from the top of the stack).
	
</comment>
<cpp>
	virtual T popElement() = 0;
	
}; // class Stack<T>

template <typename T> class Queue : public Collection<T>{
public:
	
	virtual ~Queue(){};
	
</cpp>
<comment language="Chinese">

</comment>
<comment language="English">
--	Return: the element at the head of the queue
</comment>
<cpp>
	virtual T getHeadElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Adds the element e to the head of the queue
</comment>
<cpp>
	virtual bool addElementTohead(T e) = 0;
	
	virtual bool setHeadElement(T e) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Removes the element at the head of the queue
</comment>
<cpp>
	virtual bool removeHeadElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: the element at the tail of the queue
</comment>
<cpp>
	virtual T getTailElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Adds the element e to the tail of the queue
</comment>
<cpp>
	virtual bool addElementToTail(T e) = 0;
	
	virtual bool setTailElement(T e) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Removes the element at the tail of the queue
</comment>
<cpp>
	virtual bool removeTailElement() = 0;
	
}; // class Queue<T>

template <typename T> class SortedCollection : public Collection<T>{
public:
	
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: the least element in the sorted collection
</comment>
<cpp>
	virtual T getFirstElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: true only if it successfully removes the
	least element in the sorted collection
</comment>
<cpp>
	virtual bool removeFirstElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: the greatest element in the sorted collection
</comment><cpp>
	virtual T getLastElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: true only if it successfully removes the
	greatest element in the sorted collection
</comment><cpp>
	virtual bool removeLastElement() = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: the element in the sorted collection that
	is less than or equal to (if inclusive==true) the
	given element e
</comment><cpp>
	virtual T getElementByFloor(T e, bool inclusive) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	Return: the element in the sorted collection that
	is greater than or equal to (if inclusive==true) the
	given element e
</comment>
<cpp>
	virtual T getElementByCeiling(T e, bool inclusive) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	
</comment>
<cpp>
	virtual SortedCollection* headSet(T toElement, bool inclusive) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	
</comment>
<cpp>
	virtual SortedCollection* tailSet(T fromElement, bool inclusive) = 0;
</cpp>

<comment language="Chinese">

</comment>
<comment language="English">
--	
</comment><cpp>
	virtual SortedCollection* middleSet(T fromElement, bool fromInclusive,
			T toElement, bool toInclusive) = 0;
	
}; // class SortedCollection<T>
</cpp>
