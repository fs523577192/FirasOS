<head language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<cpp>
#ifndef __LINKED_STACK_H_
#define __LINKED_STACK_H_
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED __LINKED_STACK_H_
__LINKED_STACK_H_	EQU	1
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED __LINKED_STACK_H_
__LINKED_STACK_H_	EQU	1
</assemblyX86>
<include>LinkedListNode</include>
<java>
public class _LinkedStack<T>{
	
	private LinkedListNode<T> top;
	
	public _LinkedStack(){
		top = null;
	}
	
	public _LinkedStack(T e){
		top = new LinkedListNode<T>(e);
	}
	
	public boolean isEmpty(){
		return top == null;
	}
	
	public int getSize(){
		if(top == null) return 0;
		int size = 1;
		LinkedListNode<T> temp = top;
		while(top.getNext() != null){
			size++;
			temp = temp.getNext();
		}
		return size;
	}
}
</java>
<cpp>
template <typename T> class _LinkedStack{
private:
	LinkedListNode<T> *top;
public:
	
	CALLCONV _LinkedStack(){
		top = (LinkedListNode<T>*)0;
	}
	
	CALLCONV _LinkedStack(T e){
		top = new LinkedListNode<T>(e);
	}
	
	CALLCONV ~_LinkedStack(){
		removeAllElement();
	}
</cpp>
<assemblyX64 compiler="fasm">
; bool _LinedStack::initialize(_LinkedStack* this, LinkedListNode* top);
_LinkedStack.initialize:
	xor	rax,	rax
	test	rcx,	rcx
	; TODO: NullPointerException
	jz	.return
	mov	[rcx],	rdx
	mov	al,	1
.return:
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
; bool _LinedStack::initialize(_LinkedStack* this, LinkedListNode* top);
_LinkedStack.initialize:
	mov	eax,	[esp+4]
	test	eax,	eax
	; TODO: NullPointerException
	jz	.return
@@:	mov	ecx,	[esp+8]
	mov	[eax],	ecx
	mov	eax,	1
.return:
	retn	4
</assemblyX86>
<cpp>
	
	inline bool isEmpty(){
		if(this == (_LinkedStack*)0)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return true;
		#endif
		return top == (LinkedListNode<T>*)0;
	}
	
	CALLCONV unsigned getSize(){
		if(isEmpty()) return 0;
		register unsigned size = 1;
		register LinkedListNode<T> *temp = top;
		while(temp->next != (LinkedListNode<T>*)0){
			size++;
			temp = temp->next;
		}
		return size;
	}
</cpp>
<assemblyX64 compiler="fasm">
; bool _LinkedStack::isEmpty(_LinkedStack *this)
_LinkedStack.isEmpty:
	test	rcx,	rcx
	jz	.true			; if this==null, return true
	; TODO: NullPointerException
	mov	rax,	[rcx]		; rax = this->top
	test	rax,	rax
	jz	.true
	xor	rax,	rax		; rax = false
	ret
.true:	mov	rax,	1
	ret

; unsigned _LinkedStack::getSize(_LinkedStack *this)
_LinkedStack.getSize:
	xor	rax,	rax		; rax = 0
	test	rcx,	rcx
	jz	.return			; if this==null, return 0
	; TODO: NullPointerException
@@:	mov	rcx,	[rcx]		; first loop: rcx = top
					; other loop: rcx = rcx->next
	test	rcx,	rcx
	jz	.return
	inc	rax
	jmp	@B
.return:
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">

_LinkedStack.isEmpty:
	mov	eax,	DWORD [esp+4]
	test	eax,	eax
	jz	.true			; if this==null, return true
	; TODO: NullPointerException
	mov	eax,	[eax]		; eax = this->top
	test	eax,	eax
	jz	.true
	xor	eax,	eax		; eax = false
	retn	4
.true:	mov	eax,	1
	retn	4

_LinkedStack.getSize:
	mov	ecx,	[esp+4]		; ecx = this
	xor	eax,	eax		; eax = 0
	test	ecx,	ecx
	jz	.return			; if this==null, return 0
	; TODO: NullPointerException
@@:	mov	ecx,	[ecx]		; first loop: ecx = this->top
					; other loop: ecx = ecx->next
	test	ecx,	ecx
	jz	.return
	inc	eax
	jmp	@B
.return:
	retn	4
</assemblyX86>
<java>
	boolean removeAllElement(){
		if(isEmpty()) return false;
		top = null;
		return true;
	}
</java>
<cpp>
	
	bool removeAllElement(){
		if(isEmpty()) return false;
		while(top != (LinkedListNode<T>*)0){
			LinkedListNode<T> *temp = top;
			top = top->next;
			delete temp;
		}
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">
_LinkedStack.removeAllElement:
	sub	rsp,	4*8
	mov	[rsp+5*8],	rcx	; save this
	test	rcx,	rcx
	jnz	@F
	; TODO: NullPointerException
	xor	rax,	rax
	jmp	.return
@@:	mov	rax,	[rcx]		; rax = this->top
	test	rax,	rax
	jnz	@F
	xor	rax,	rax
	jmp	.return			; return false
@@:	mov	rcx,	[rcx]		; rcx = this->top
@@:	mov	rax,	[rcx]		; rax = top->next (new top)
	mov	[rsp+6*8],	rax
	;call	LinkedListNode.delete	; delete top
	mov	rcx,	[rsp+6*8]	; rcx = new top
	test	rcx,	rcx
	jnz	@B
	mov	rcx,	[rsp+5*8]
	xor	rax,	rax
	mov	[rcx],	rax		; this->top = null
	mov	al,	1
.return:
	add	rsp,	4*8
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
_LinkedStack.removeAllElement:
	push	esi
	push	edi
; stack: |esi |edi |ret |this|
	mov	edi,	[esp+3*4]	; edi = this
	test	edi,	edi
	jnz	@F
	; TODO: NullPointerException
	xor	eax,	eax
	jmp	.return
@@:	mov	esi,	[edi]	; esi = this->top
	test	esi,	esi
	jz	@F		; jump if not empty
	xor	eax,	eax
	jmp	.return
@@:	push	DWORD [esi]	; push top->next (new top)
	;push	esi
	;call	LinkedListNode.delete	; delete top
	pop	esi		; ebx = new top
	test	esi,	esi
	jnz	@B
	mov	DWORD [edi],	0
	mov	eax,	1
.return:
	pop	edi
	pop	esi
	retn	4
</assemblyX86>
<cpp>
	
	bool pushElement(T e){
		if(this == (_LinkedStack*)0)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return false;
		#endif
		top = new LinkedListNode<T>(e, top);
		return true;
	}
	
	T popElement(){
	#ifdef _EXCEPTION_H_
		if(this == (_LinkedStack*)0 || top == (LinkedListNode<T>*)0)
			throw NullPointerException();
	#endif
		T k = top->getKey();
		LinkedListNode<T> *temp = top;
		top = top->next;
		delete temp;
		return k;
	}
	
}; // class _LinkedStack<T>
#endif // __LINKED_STACK_H_
</cpp>
<assemblyX64 compiler="fasm">
; bool _LinkedStack.pushNode(_LinkedStack *this, LinkedListNode *node)
_LinkedStack.pushNode:
	test	rcx,	rcx
	jz	.false
	; TODO: NullPointerException
	test	rdx,	rdx
	jnz	@F
.false:
	xor	rax,	rax
	ret
@@:	mov	rax,	[rcx]	; this->top
	mov	[rdx+LinkedListNode.NEXT],	rax	; node->next = top
	mov	[rcx],	rdx
	mov	rax,	1
	ret

; bool _LinkedStack::popNode(_IN_ _LinkedStack *this,
;			_OUT_ T *pkey, _IN_ unsigned sizeOfT)
_LinkedStack.popNode:
	test	rcx,	rcx
	jnz	@F
	; TODO: NullPointerException
.false:
	xor	rax,	rax
	ret
@@:	mov	rax,	[rcx]	; rax = this->top
	test	rax,	rax
	; TODO: NullPointerException
	jz	.false		; if top==null, return false
	
	lea	r9,	[rax+LinkedListNode.KEY]	; r9 = &(top->key)
	test	rdx,	rdx
	jz	.notCopy
@@:	test	r8,	r8
	jz	.notCopy
	mov	al,	[r9]
	mov	[rdx],	al
	inc	r9
	inc	rdx
	dec	r8
	jmp	@B
.notCopy:
	mov	rax,	[rcx]
	mov	rdx,	[rax+LinkedListNode.NEXT]
	mov	[rcx],	rdx	; top = top->next
	
	;sub	rsp,	4*8
	;mov	rcx,	rax
	;call	LinkedListNode.delete
	;add	rsp,	4*8
.true:
	mov	rax,	1
	ret

END IF ; __LINKED_STACK_H_
</assemblyX64>
<assemblyX86 compiler="fasm">
_LinkedStack.pushNode:
	mov	eax,	[esp+4]		; this
	test	eax,	eax
	jnz	@F
	; TODO: NullPointerException
	retn	4*2
@@:	mov	ecx,	[esp+8]		; node
	test	ecx,	ecx
	jnz	@F
	; TODO: NullPointerException
	xor	eax,	eax
	retn	4*2
@@:	mov	edx,	[eax]		; this->top
	mov	[ecx+LinkedListNode.NEXT],	edx	; node->next = top
	mov	[eax],	ecx		; top = node
	mov	eax,	1
	retn	4*2

_LinkedStack.popNode:
	mov	ecx,	[esp+4]		; this
	test	ecx,	ecx
	jnz	@F
	; TODO: NullPointerException
.false:
	xor	eax,	eax
	retn	4*3
@@:	mov	eax,	[ecx]		; eax = this->top
	test	eax,	eax
	jz	.false
	; TODO: NullPointerException
	
	push	esi
	push	edi
; stack: |edi |esi |ret |this|pkey|size|
LABEL	.pkey	AT	esp+4*4
LABEL	.size	AT	esp+4*5
	mov	edi,	[.pkey]
	test	edi,	edi
	jz	.notCopy
	mov	ecx,	[.size]
	lea	esi,	[eax+LinkedListNode.KEY]
	rep	movsb
.notCopy:
	pop	edi
	pop	esi
	mov	ecx,	[esp+4]		; this
	mov	eax,	[ecx]		; this->top
	mov	edx,	[eax+LinkedListNode.NEXT]
	mov	[ecx],	edx		; top = top->next
	;push	eax
	;call	LinkedListNode.delete
.true:	mov	eax,	1
	retn	4*3

END IF ; __LINKED_STACK_H_
</assemblyX86>
