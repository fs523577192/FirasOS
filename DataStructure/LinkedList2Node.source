<head language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<include>Collection</include>
<cpp>
#ifndef _LINKED_LIST_2_NODE_H_
#define _LINKED_LIST_2_NODE_H_
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED _LINKED_LIST_2_NODE_H_
_LINKED_LIST_2_NODE_H_	EQU	1

LINKED_LIST_NEXT	EQU	0
LINKED_LIST_PREV	EQU	8
LINKED_LIST_KEY		EQU	16
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED _LINKED_LIST_2_NODE_H_
_LINKED_LIST_2_NODE_H_	EQU	1

LINKED_LIST_NEXT	EQU	0
LINKED_LIST_PREV	EQU	4
LINKED_LIST_KEY		EQU	8
</assemblyX86>
<cpp>
template <typename T> class LinkedList2;
template <typename T> class LinkedListO2;
template <typename T> class LinkedQueue;

template <typename T> class LinkedList2Node{
protected:
	
	LinkedList2Node *next, *prev;
	
	T key;
	
	#define LinkedList2NullNode ((LinkedList2Node*)0)
	friend class LinkedList2<T>;
	friend class LinkedQueue<T>;
	
public:
	
	LinkedList2Node(T e){
		key = e;
		prev = next = LinkedList2NullNode;
	}
	
	LinkedList2Node(T e, LinkedList2Node *n, LinkedList2Node *p){
		key = e;
		next = n; prev = p;
		if(n != LinkedList2NullNode) n->prev = this;
		if(p != LinkedList2NullNode) p->next = this;
	}
	
	~LinkedList2Node(){
		if(getPrev() != LinkedList2NullNode) prev->next = next;
		if(getNext() != LinkedList2NullNode) next->prev = prev;
	}
	
	inline T getKey(){
		return key;
	}
	
	inline LinkedList2Node *getNext(){
		#ifdef _EXCEPTION_H_
		if(this == LinkedList2NullNode) throw NullPointerException();
		#endif
		return next;
	}
	
	inline LinkedList2Node *getPrev(){
		#ifdef _EXCEPTION_H_
		if(this == LinkedList2NullNode) throw NullPointerException();
		#endif
		return prev;
	}
	
	LinkedList2Node *getTail(){
		#ifdef _EXCEPTION_H_
		if(this == LinkedList2NullNode) throw NullPointerException();
		#endif
		register LinkedList2Node *temp = this;
		while(temp->next != LinkedList2NullNode) temp = temp->next;
		return temp;
	}
	
	LinkedList2Node *gethead(){
		#ifdef _EXCEPTION_H_
		if(this == LinkedList2NullNode) throw NullPointerException();
		#endif
		register LinkedList2Node *temp = this;
		while(temp->prev != LinkedList2NullNode) temp = temp->prev;
		return temp;
	}
	
}; // class LinkedList2Node<T>
#undef LinkedList2NullNode
#define LinkedList2NullNode ((LinkedList2Node<T>*)0)
#endif // _LINKED_LIST_2_NODE_H_
</cpp>
<assemblyX64 compiler="fasm">

LinkedListNode.getTail:
	;test	rcx,	rcx
	; TODO: NullPointerException
	xor	rax,	rax			; rax = null
@@:	cmp	rax,	[rcx+LINKED_LIST_NEXT]
	je	@F				; jump if rcx->next == null
	mov	rcx,	[rcx+LINKED_LIST_NEXT]	; rcx = rcx->next
	jmp	@B
@@:	mov	rax,	rcx
	ret

LinkedList2Node.gethead:
	;test	rcx,	rcx
	; TODO: NullPointerException
	xor	rax,	rax			; rax = null
@@:	cmp	rax,	[rcx+LINKED_LIST_PREV]
	je	@F				; jump if rcx->prev == null
	mov	rcx,	[rcx+LINKED_LIST_PREV]	; rcx = rcx->prev
	jmp	@B
@@:	mov	rax,	rcx
	ret

END IF ; _LINKED_LIST_2_NODE_H_
</assemblyX64>
<assemblyX86 compiler="fasm">

LinkedList2Node.getTail:
	;cmp	DWORD [esp+4],	0
	; TODO: NullPointerException
@@:	mov	eax,	[esp+4]			; eax = this
	cmp	DWORD [eax+LINKED_LIST_NEXT],	0
	je	@F				; jump if eax->next == null
	mov	eax,	[eax+LINKED_LIST_NEXT]	; eax = eax->next
	jmp	@B
@@:	retn	4

LinkedList2Node.gethead:
	;cmp	DWORD [esp+4],	0
	; TODO: NullPointerException
@@:	mov	eax,	[esp+4]			; eax = this
	cmp	DWORD [eax+LINKED_LIST_PREV],	0
	je	@F				; jump if eax->prev == null
	mov	eax,	[eax+LINKED_LIST_PREV]	; eax = eax->prev
	jmp	@B
@@:	retn	4

END IF ; _LINKED_LIST_2_NODE_H_
</assemblyX86>
