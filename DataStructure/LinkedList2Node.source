<head language="Chinese">
双向链表节点
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Doubly Linked List Node
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<cpp>
#ifndef _LINKED_LIST_2_NODE_H_
#define _LINKED_LIST_2_NODE_H_
</cpp>
<assemblyX64 compiler="fasm">
IF ~DEFINED _LINKED_LIST_2_NODE_H_
_LINKED_LIST_2_NODE_H_	EQU	1

LinkedList2Node.NEXT	EQU	0
LinkedList2Node.PREV	EQU	8
LinkedList2Node.KEY	EQU	16
</assemblyX64>
<assemblyX86 compiler="fasm">
IF ~DEFINED _LINKED_LIST_2_NODE_H_
_LINKED_LIST_2_NODE_H_	EQU	1

LinkedList2Node.NEXT	EQU	0
LinkedList2Node.PREV	EQU	4
LinkedList2Node.KEY	EQU	8
</assemblyX86>
<include>../Macro</include>
<java>
class LinkedList2Node{
	protected LinkedList2Node next, prev;
	protected key;
	public LinkedList2Node(T k){
		key = k; next = prev = null;
	}
	public LinkedList2Node(T k, LinkedList2Node n, LinkedList2Node p){
		key = k; next = n; prev = p;
	}
	public void remove(){
		if(prev != null) prev.next = next;
		if(next != null) next.prev = prev;
	}
</java>
<cpp>
template <typename T> class _LinkedList2;
template <typename T> class _LinkedListO2;
template <typename T> class _LinkedQueue2;
template <typename T> class LinkedList2;
template <typename T> class LinkedListO2;
template <typename T> class LinkedQueue;

template <typename T> class LinkedList2Node{
protected:
	
	LinkedList2Node *next, *prev;
	
	T key;
	
	#define LinkedList2NullNode ((LinkedList2Node*)0)
	friend class _LinkedList2<T>;
	friend class _LinkedListO2<T>;
	friend class _LinkedQueue2<T>;
	friend class LinkedList2<T>;
	friend class LinkedListO2<T>;
	friend class LinkedQueue<T>;
	
public:
	
	CALLCONV LinkedList2Node(T e){
		key = e;
		prev = next = LinkedList2NullNode;
	}
	
	CALLCONV LinkedList2Node(T e, LinkedList2Node *n, LinkedList2Node *p){
		key = e;
		next = n; prev = p;
		if(n != LinkedList2NullNode) n->prev = this;
		if(p != LinkedList2NullNode) p->next = this;
	}
	
	~LinkedList2Node(){
		if(prev != LinkedList2NullNode) prev->next = next;
		if(next != LinkedList2NullNode) next->prev = prev;
	}
</cpp>
<assemblyX64 compiler="fasm">
; bool LinkedListNode::initialize(LinkedList2Node* this, T* key,
	unsigned sizeOfT, LinkedList2Node* next, LinkedList2Node* prev);
; rcx: this	rdx: pkey	r8: size	r9: next
; stack: |ret     |shadow  |shadow  |shadow  |shadow  |prev    |
LinkedList2Node.initialize:
	test	rcx,	rcx
	jnz	@F
	; TODO: NullPointerException
	xor	rax,	rax
	ret
@@:	mov	[rcx+LinkedListNode.NEXT],	r9
	mov	rax,	[rsp+5*8]
	mov	[rcx+LinkedListNode.PREV],	rax
	add	rcx,	LinkedListNode.KEY
	test	rdx,	rdx
	jz	.null		; jump if pointer to key is null
	; TODO: NullPointerException
@@:	test	r8,	r8
	jz	.true
	mov	al,	[rdx]
	mov	[rcx],	al
	inc	rcx
	inc	rdx
	jmp	@B
.null:	test	r8,	r8
	jz	.true
	mov	BYTE [rcx],	0
	inc	rcx
	jmp	.null
.true:	mov	rax,	1
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
; bool LinkedListNode::initialize(LinkedList2Node* this, T* key,
	unsigned sizeOfT, LinkedList2Node* next, LinkedList2Node* prev);
LinkedList2Node.initialize:
	enter
	push	esi
	push	edi
; stack: |ebp |ret |this|pkey|size|next|prev|
	mov	edi,	[ebp+8]
	test	edi,	edi
	jnz	@F
	; TODO: NullPointerException
	xor	rax,	rax
	jmp	.return
@@:	mov	eax,	[ebp+20]
	stosd			; this->next = next
	mov	eax,	[ebp+24]
	stosd			; this->prev = prev
	mov	ecx,	[ebp+16]
	mov	esi,	[ebp+12]
	test	esi,	esi
	jz	.null		; jump if pointer to key is null
	; TODO: NullPointerException
	rep	movsb
	jmp	.true
.null:
	xor	eax,	eax
	rep	stosb
.true:	mov	eax,	1
.return:
	pop	edi
	pop	esi
	retn	20
</assemblyX86>
<java>
	T getKey(){
		return key;
	}
	LinkedList2Node getNext(){
		return next;
	}
	LinkedList2Node getPrev(){
		return prev;
	}
	LinkedList2Node getTail(){
		LinkedList2Node temp = this;
		while(temp.next != null) temp = temp.next;
		return temp;
	}
	LinkedList2Node getHead(){
		LinkedList2Node temp = this;
		while(temp.prev != null) temp = temp.prev;
		return temp;
	}
} // class LinkedList2Node
</java>
<cpp>	
	inline T getKey(){
		#ifdef _EXCEPTION_H_
		if(this == LinkedList2NullNode) throw NullPointerException();
		#endif
		return key;
	}
	
	inline LinkedList2Node *getNext(){
		if(this == LinkedList2NullNode)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return LinkedList2NullNode;
		#endif
		return next;
	}
	
	inline LinkedList2Node *getPrev(){
		if(this == LinkedList2NullNode)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return LinkedList2NullNode;
		#endif
		return prev;
	}
	
	CALLCONV LinkedList2Node *getTail(){
		if(this == LinkedList2NullNode)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return LinkedList2NullNode;
		#endif
		register LinkedList2Node *temp = this;
		while(temp->next != LinkedList2NullNode) temp = temp->next;
		return temp;
	}
	
	CALLCONV LinkedList2Node *getHead(){
		if(this == LinkedList2NullNode)
		#ifdef _EXCEPTION_H_
			throw NullPointerException();
		#else
			return LinkedList2NullNode;
		#endif
		register LinkedList2Node *temp = this;
		while(temp->prev != LinkedList2NullNode) temp = temp->prev;
		return temp;
	}
	
}; // class LinkedList2Node<T>
#undef LinkedList2NullNode
#define LinkedList2NullNode ((LinkedList2Node<T>*)0)
#endif // _LINKED_LIST_2_NODE_H_
</cpp>
<assemblyX64 compiler="fasm">

LinkedListNode.getTail:
	xor	rax,	rax			; rax = null
	test	rcx,	rcx
	; TODO: NullPointerException
	jnz	@F
	ret
@@:	cmp	rax,	[rcx+LinkedList2Node.NEXT]
	je	@F				; jump if rcx->next == null
	mov	rcx,	[rcx+LinkedList2Node.NEXT]	; rcx = rcx->next
	jmp	@B
@@:	mov	rax,	rcx
	ret

LinkedList2Node.getHead:
	xor	rax,	rax			; rax = null
	test	rcx,	rcx
	; TODO: NullPointerException
	jnz	@F
	ret
@@:	cmp	rax,	[rcx+LinkedList2Node.PREV]
	je	@F				; jump if rcx->prev == null
	mov	rcx,	[rcx+LinkedList2Node.PREV]	; rcx = rcx->prev
	jmp	@B
@@:	mov	rax,	rcx
	ret

END IF ; _LINKED_LIST_2_NODE_H_
</assemblyX64>
<assemblyX86 compiler="fasm">

LinkedList2Node.getTail:
	cmp	DWORD [esp+4],	0
	jne	@F
	; TODO: NullPointerException
	xor	eax,	eax
	retn	4
@@:	mov	eax,	[esp+4]			; eax = this
	cmp	DWORD [eax+LinkedList2Node.NEXT],	0
	je	@F				; jump if eax->next == null
	mov	eax,	[eax+LinkedList2Node.NEXT]	; eax = eax->next
	jmp	@B
@@:	retn	4

LinkedList2Node.getHead:
	cmp	DWORD [esp+4],	0
	jne	@F
	; TODO: NullPointerException
	xor	eax,	eax
	retn	4
@@:	mov	eax,	[esp+4]			; eax = this
	cmp	DWORD [eax+LinkedList2Node.PREV],	0
	je	@F				; jump if eax->prev == null
	mov	eax,	[eax+LinkedList2Node.PREV]	; eax = eax->prev
	jmp	@B
@@:	retn	4

END IF ; _LINKED_LIST_2_NODE_H_
</assemblyX86>
