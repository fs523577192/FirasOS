<Head Language=Chinese>
作者：伍裕平
归属：操作系统数据结构
</Head>
<Head Language=English>
Author: Firas
BelongsTo: Data Structure in the OS
</Head>
<Comment Language=Chinese>
双向循环链表
</Comment>
<Comment Language=English>
Bi-directional Circular LinkedList
</Comment>
<Include>LinkedList2Node</Include>
<Cpp>
#ifndef _LINKED_LIST_O2_H_
#define _LINKED_LIST_O2_H_
template <typename T> class LinkedListO2 : public List<T>{
private:
	LinkedList2Node<T> *head;
public:
	
	LinkedListO2(){
		head = (LinkedList2Node<T>*)0;
	}
	
	LinkedListO2(T e){
		head = new LinkedList2Node<T>(e);
		head->next = head->prev = head;
	}
	
	~LinkedListO2(){
		removeAllElement();
	}
	
	bool isEmpty(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList2*)0) throw NullPointerException();
		#endif
		return head == (LinkedList2Node<T>*)0;
	}
	
	unsigned getSize(){	// inherited from Collection
		if(isEmpty()) return 0;
		register unsigned size = 1;
		for(register LinkedList2Node<T> *temp = head->next;
			temp != head;
			temp = temp->next) size++;
		return size;
	}
	
	bool addElement(T e){	// inherited from Collection
		if(isEmpty()){
			head = new LinkedList2Node<T>(e);
			head->next = head->prev = head;
		}else head = new LinkedList2Node<T>(e, head, head->prev);
		return true;
	}
	
	bool hasElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		
	}
	
	bool removeElement(T e){	// inherited from Collection
		
	}
	
	bool removeAllElement(){	// inherited from Collection
		
	}
	
	
}; // class LinkedListO2<T>
#endif // _LINKED_LIST_O2_H_
</Cpp>
