<Head Language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</Head>
<Head Language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</Head>
<Cpp>
#ifndef _LINKED_STACK_H_
#define _LINKED_STACK_H_
</Cpp>
<AssemblyX64 Compiler="fasm">
IF ~DEFINED _LINKED_STACK_H_
_LINKED_STACK_H_	EQU	1
</AssemblyX64>
<AssemblyX86 Compiler="fasm">
IF ~DEFINED _LINKED_STACK_H_
_LINKED_STACK_H_	EQU	1
</AssemblyX86>
<Include>LinkedListNode</Include>
<Cpp>
template <typename T> class LinkedStack : public Stack<T>{
private:
	LinkedListNode<T> *top;
public:
	
	LinkedStack(){
		top = (LinkedListNode<T>*)0;
	}
	
	LinkedStack(T e){
		top = new LinkedListNode<T>(e);
	}
	
	~LinkedStack(){
		removeAllElement();
	}
	
	inline bool isEmpty(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedStack*)0) throw NullPointerException();
		#endif
		return top == (LinkedListNode<T>*)0;
	}
	
	unsigned getSize(){	// inherited from Collection
		if(isEmpty()) return 0;
		register unsigned size = 1;
		register LinkedListNode<T> *temp = top;
		while(temp->next != (LinkedListNode<T>*)0){
			size++;
			temp = temp->next;
		}
		return size;
	}
</Cpp>
<AssemblyX64 Compiler="fasm">

LinkedStack.isEmpty:
	;test	rcx,	rcx
	; TODO: NullPointerException
	mov	rax,	[rcx]		; rax = this->top
	test	rax,	rax
	jz	@F
	mov	rax,	1
@@:	ret

LinkedStack.getSize:
	;test	rcx,	rcx
	; TODO: NullPointerException
	xor	rax,	rax		; rax = 0
@@:	mov	rcx,	[rcx]		; first loop: rcx = top
					; other loop: rcx = rcx->next
	test	rcx,	rcx
	jz	@F
	inc	rax
	jmp	@B
@@:	ret
</AssemblyX64>
<AssemblyX86 Compiler="fasm">

LinkedStack.isEmpty:
	;cmp	DWORD [esp+4],	0
	; TODO: NullPointerException
	mov	eax,	DWORD [esp+4]
	mov	eax,	[eax]		; eax = this->top
	test	eax,	eax
	jz	@F
	mov	eax,	1
@@:	retn	4

LinkedStack.getSize:
	;cmp	DWORD [esp+4],	0
	; TODO: NullPointerException
	push	ebx			; ##
; stack: |ebx |ret |this|
	mov	ebx,	[esp+8]		; ebx = this
	xor	eax,	eax		; eax = 0
@@:	mov	ebx,	[ebx]		; first loop: ebx = top
					; other loop: ebx = ebx->next
	test	ebx,	ebx
	jz	@F
	inc	eax
	jmp	@B
@@:	pop	ebx			; ##
	retn	4
</AssemblyX86>
<Cpp>
	
	bool addElement(T e){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedStack*)0) throw NullPointerException();
		#endif
		top = new LinkedListNode<T>(e, top);
		return true;
	}
</Cpp>
<AssemblyX64 Compiler="fasm">
LinkedStack.addElement:
	
	ret
</AssemblyX64>
<AssemblyX86 Compiler="fasm">
LinkedStack.addElement:
	
	retn	8
</AssemblyX86>
<Cpp>
	
	bool removeElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		if(top->getKey()==e){
			popElement();
			return true;
		}
		LinkedListNode<T> *temp1 = top, *temp2 = top->next;
		while(temp2 != (LinkedListNode<T>*)0){
			if(temp2->getKey()==e){
				temp1->next = temp2->next;
				delete temp2;
				return true;
			}
			temp1 = temp2;
			temp2 = temp2->next;
		}
		return false;
	}
</Cpp>
<AssemblyX64 Compiler="fasm">
LinkedStack.removeElement:
	
	ret
</AssemblyX64>
<AssemblyX86 Compiler="fasm">
LinkedStack.removeElement:
	
	retn	8
</AssemblyX86>
<Cpp>
	
	bool removeAllElement(){	// inherited from Collection
		if(isEmpty()) return false;
		while(top != (LinkedListNode<T>*)0){
			LinkedListNode<T> *temp = top;
			top = top->next;
			delete temp;
		}
		return true;
	}
</Cpp>
<AssemblyX64 Compiler="fasm">
LinkedStack.removeAllElement:
	
	ret
</AssemblyX64>
<AssemblyX86 Compiler="fasm">
LinkedStack.removeAllElement:
	
	retn	4
</AssemblyX86>
<Cpp>
	
	bool hasElement(T e){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedStack*)0) throw NullPointerException();
		#endif
		for(register LinkedListNode<T> *temp = top; temp != (LinkedListNode<T>*)0;
			temp = temp->next) if(temp->getKey()==e) return true;
		return false;
	}
</Cpp>
<AssemblyX64 Compiler="fasm">
LinkedStack.hasElement:
	
	ret
</AssemblyX64>
<AssemblyX86 Compiler="fasm">
LinkedStack.hasElement:
	
	retn	8
</AssemblyX86>	
<Cpp>
	
	inline bool pushElement(T e){	// inherited from Stack
		return addElement(e);
	}
	
	T popElement(){	// inherited from Stack
	#ifdef _EXCEPTION_H_
		if(this == (LinkedStack*)0 || top == (LinkedListNode<T>*)0)
			throw NullPointerException();
	#endif
		T k = top->getKey();
		LinkedListNode<T> *temp = top;
		top = top->next;
		delete temp;
		return k;
	}
	
}; // class LinkedStack<T>
#endif // _LINKED_STACK_H_
</Cpp>
<AssemblyX64 Compiler="fasm">
LinkedStack.pushElement	EQU	LinkedStack.addElement

LinkedStack.popElement:
	
	ret

END IF ; _LINKED_STACK_H_
</AssemblyX64>
<AssemblyX86 Compiler="fasm">
LinkedStack.pushElement	EQU	LinkedStack.addElement

LinkedStack.popElement:
	
	ret

END IF ; _LINKED_STACK_H_
</AssemblyX86>
