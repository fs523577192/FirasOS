<head language="Chinese">
作者：伍裕平
归属：操作系统数据结构
</head>
<head language="English">
Author: Firas
BelongsTo: Data Structure in the OS
</head>
<comment language="Chinese">
单向不循环链表
</comment>
<comment language="English">
Not-circular Singly Linked List
</comment>
<include>LinkedListNode</include>
<cpp>
#ifndef _LINKED_LIST_H_
#define _LINKED_LIST_H_
template <typename T> class LinkedList : public List<T>{
private:
	LinkedListNode<T> *head;
public:
	
	LinkedList(){
		head = LinkedListNullNode;
	}
	
	LinkedList(T k){
		head = new LinkedListNode<T>(k);
	}
	
	~LinkedList(){
		removeAllElement();
	}
	
	inline bool isEmpty(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList*)0) throw NullPointerException();
		#endif
		return head == LinkedListNullNode;
	}
</cpp>
<assemblyX64 compiler="fasm">
LinkedList.isEmpty:
	;test	rcx,	rcx
	; TODO: NullPointerException
	mov	rax,	[rcx]	; rcx == this; rax = this->head
	test	rax,	rax
	jz	@F		; jump if head == LinkedListNullNode
	xor	rax,	rax
	ret
@@:	mov	rax,	1
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedList.isEmpty:
; stack: |ret |this|
	mov	eax,	[esp+4]	; eax = this
	;test	eax,	eax
	; TODO: NullPointerException
	mov	eax,	[eax]	; eax = this->head
	test	eax,	eax
	jz	@F		; jump if head == LinkedListNullNode
	xor	eax,	eax
	retn	4
@@:	mov	eax,	1
	retn	4
</assemblyX86>
<cpp>
	
	unsigned getSize(){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList*)0) throw NullPointerException();
		#endif
		register unsigned size = 0;
		for(register LinkedListNode<T> *temp = head;
			temp != LinkedListNullNode;
			temp = temp->next) size++;
		return size;
	}
</cpp>
<assemblyX64 compiler="fasm">
LinkedList.getSize:
	;test	rcx,	rcx
	; TODO: NullPointerException
	xor	rax,	rax
	mov	rcx,	[rcx]		; rcx = this->head
@@:	test	rcx,	rcx
	jz	@F			; jump if rcx == null
	inc	rax
	mov	rcx,	[rcx]		; rcx = rcx->next
	jmp	@B
@@:	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedList.getSize:
	push	ecx
; stack: |ecx |ret |this|
	mov	ecx,	[esp+8]		; ebx = this
	;test	ecx,	ecx
	; TODO: NullPointerException
	xor	eax,	eax
	mov	ecx,	[ecx]		; ecx = this->head
@@:	test	ecx,	ecx
	jz	@F			; jump if ecx == null
	inc	eax
	mov	ecx,	[ecx]		; ecx = ecx->next
	jmp	@B
@@:	pop	ecx
	retn	4
</assemblyX86>
<cpp>
	
	bool addElement(T e){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList*)0) throw NullPointerException();
		#endif
		head = new LinkedListNode<T>(e, head);
		return true;
	}
</cpp>
<assemblyX64 compiler="fasm">
; TODO: new operator
LinkedList.addElement:
	;test	rcx,	rcx
	; TODO: NullPointerException
	
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedList.addElement:
	; TODO: NullPointerException
	
</assemblyX86>
<cpp>
	
	bool hasElement(T e){	// inherited from Collection
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList*)0) throw NullPointerException();
		#endif
		for(register LinkedListNode<T> *temp = head;
				temp != LinkedListNullNode;
				temp = temp->next)
			if(temp->key == e) return true;
		return false;
	}
	
</cpp>
<assemblyX64 compiler="fasm">
LinkedList.hasElement:
	;test	rcx,	rcx
	; TODO: NullPointerException
	
.loop0:
	mov	rcx,	[rcx]		; for first loop: rcx = head
					; for other loops: rcx = rcx->next
	test	rcx,	rcx
	jz	.false
	cmp	rdx,	[rcx+8]
	jne	.loop0			; loop if rcx->key != 
.true:	mov	rax,	1
	ret
.false:	xor	rax,	rax
	ret
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedList.hasElement:
	push	esi
; stack: |ecx |ret |this|e   |
LABEL	.node	esp+8
LABEL	.key	esp+12
	mov	eax,	[.node]		; eax = this
	;test	eax,	eax
	; TODO: NullPointerException
	
	mov	eax,	[eax]		; eax = head
.loop0:
	test	eax,	eax
	jz	.false
	mov	esi,	[.key]
	cmp	esi,	[eax+
.true:	mov	eax,	1
	pop	esi
	retn	8
.false:	xor	eax,	eax
	pop	esi
	retn	8
</assemblyX86>
<cpp>
	
	bool removeElement(T e){	// inherited from Collection
		if(isEmpty()) return false;
		LinkedListNode<T> *temp1 = head, *temp2 = head->next;
		if(head->key == e){
			head = temp2;
			delete temp1;
			return true;
		}
		while(temp2 != (LinkedListNode<T>*)0){
			if(temp2->key == e){
				temp1->next = temp2->next;
				delete temp2;
				return true;
			}
			temp1 = temp2;
			temp2 = temp2->next;
		}
		return false;
	}
</cpp>
<assemblyX64 compiler="fasm">
LinkedList.removeElement:
	
	
</assemblyX64>
<assemblyX86 compiler="fasm">
LinkedList.removeElement:
	
</assemblyX86>
<cpp>
	
	bool removeAllElement(){	// inherited from Collection
		if(isEmpty()) return false;
		while(head != LinkedListNullNode){
			register LinkedListNode<T> *temp = head;
			head = head->next;
			delete temp;
		}
		return true;
	}
	
	T getElementAtIndex(unsigned index){	// inherited from List
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList*)0 || head == LinkedListNullNode)
			throw NullPointerException();
		#endif
		LinkedListNode<T> *temp = head;
		while(index > 0 && temp != LinkedListNullNode){
			temp = temp->next;
			index--;
		}
		if(temp != LinkedListNullNode) return temp->key;
		#ifdef _EXCEPTION_H_
		throw IndexOutOfBoundsException();
		#endif
	}
	
	bool insertElementAtIndex(T e, unsigned index){	// inherited from List
		#ifdef _EXCEPTION_H_
		if(this == (LinkedList*)0) throw NullPointerException();
		#endif
		if(index == 0){
			head = new LinkedListNode<T>(e, head);
			return true;
		}
		LinkedListNode<T> *temp = head;
		while(index > 1 && temp != LinkedListNullNode){
			temp = temp->next;
			index--;
		}
		if(temp == LinkedListNullNode) return false;
		temp->next = new LinkedListNode<T>(e, temp->next);
		return true;
	}
	
	bool removeElementAtIndex(unsigned index){	// inherited from List
		if(isEmpty()) return false;
		LinkedListNode<T> *temp1 = head, *temp2 = head->next;
		if(index == 0){
			head = temp2;
			delete temp1;
			return true;
		}
		while(index > 1 && temp2 != LinkedListNullNode){
			temp1 = temp2;
			temp2 = temp2->next;
			index--;
		}
		if(temp2 == LinkedListNullNode) return false;
		temp1->next = temp2->next;
		delete temp2;
		return true;
	}
	
	bool isEqual(List<T> *l){	// inherited from List
		if(getSize() != l->getSize()) return false;
		LinkedListNode<T> *temp = head;
		for(unsigned i = 0;
				temp != LinkedListNullNode;
				i++, temp = temp->next)
			if(temp->key != l->getElementAtIndex(i)) return false;
		return true;
	}
	
	List<T>* subList(unsigned fromIndex, unsigned toIndex){
	// inherited from List
		register unsigned size = getSize();
		if(fromIndex >= size || toIndex > size)
		#ifdef _EXCEPTION_H_
			throw IndexOutOfBoundsException();
		#else
			return new LinkedList();
		#endif
		LinkedList *list = new LinkedList();
		if(fromIndex >= toIndex) return list;
		LinkedListNode<T> *temp1 = head;
		while(fromIndex > 0){
			temp1 = temp1->next;
			fromIndex--;
			toIndex--;
		}
		list->head = new LinkedListNode<T>(temp1->key);
		LinkedListNode<T> *temp2 = list->head;
		while(toIndex > 1){
			temp1 = temp1->next;
			temp2->next = new LinkedListNode<T>(temp1->key);
			temp2 = temp2->next;
			toIndex--;
		}
		return list;
	}
	
}; // class LinkedList<T>
#endif // _LINKED_LIST_H_
</cpp>
